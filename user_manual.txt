============================
Academia Portal User Manual
============================

## 1. Building the Project

From your project directory, run:

    make

This will create two executables:
- server
- client


## 2. Starting the Server

In one terminal window, run:

    ./server

This will start the server, which manages all data and handles client connections.


## 3. Starting Clients

In one or more separate terminal windows, run:

    ./client 127.0.0.1

(Replace 127.0.0.1 with your server's IP address if running on a different machine.)

Each client window can be used to log in as a different user (admin, student, faculty) and interact with the system.


## 4. Default Login Credentials (for testing)
- Admin:
    - Username: admin
    - Password: adminpass
- Student/Faculty:
    - Use the credentials you add via the admin menu.


## 5. Fresh Robust Test Case

### Initial Setup
- Start the server.
- Open 3+ client terminals for different roles (admin, student, faculty).

---

### Test Steps

#### A. Admin Operations
1. Login as Admin
    - Username: admin
    - Password: adminpass
2. Add a Student
    - ID: 101
    - Name: Alice
    - Password: alicepass
3. Add a Faculty
    - ID: 201
    - Name: ProfBob
    - Password: bobpass
4. Add another Student
    - ID: 102
    - Name: Charlie
    - Password: charliepass
5. Modify Faculty Details
    - Enter ID: 201
    - Change name to: ProfBobUpdated
    - Change password to: bobnewpass
6. Block (Deactivate) Student
    - Enter ID: 101 (Alice)
7. Activate Student
    - Enter ID: 101 (Alice)
8. Change Admin Password
    - New password: admin123
9. Delete Student
    - Enter ID: 102 (Charlie)
10. Run Consistency Check
    - Should report 0 invalid enrollments at this point.

---

#### B. Faculty Operations
1. Login as Faculty
    - Username: ProfBobUpdated
    - Password: bobnewpass
2. Add a Course
    - ID: 301
    - Name: Math101
    - Seats: 2
3. Add another Course
    - ID: 302
    - Name: Physics101
    - Seats: 1
4. Update Course Details
    - ID: 301
    - Change name to: Math101-Advanced
    - Change seats to: 3
5. View Enrollments in Courses
    - Should show both courses with 0 enrolled.
6. View Students in a Course
    - Enter Course ID: 301 (should be empty initially)
7. Change Faculty Password
    - New password: bobsecure

---

#### C. Student Operations
1. Login as Student
    - Username: Alice
    - Password: alicepass
2. Enroll in Math101-Advanced
    - Should succeed
3. Enroll in Physics101
    - Should succeed
4. Try to Enroll in Math101-Advanced again
    - Should report already enrolled
5. View Enrolled Courses
    - Should list Math101-Advanced and Physics101
6. View All Available Courses
    - Should list all courses
7. Change Password
    - New password: alice123
8. Drop (Unenroll) from Physics101
    - Should succeed
9. Exit

---

#### D. Faculty Checks
1. Faculty Views Enrollments in Math101-Advanced
    - Should show 1 enrolled (Alice)
2. Faculty Views Students in Math101-Advanced
    - Should list Alice

---

#### E. Admin Consistency Check
1. Admin Deletes Alice
    - ID: 101
2. Admin Runs Consistency Check
    - Should report 1 invalid enrollment removed (Alice from Math101-Advanced)

---

#### F. Logging
- Check actions.log for a full audit trail of all actions above.

---

### G. Robust Locking/Concurrency Test

**Test 1: Faculty and Student Simultaneous Access**
1. In one terminal, log in as Faculty and start updating a course (e.g., change name or seats, but do not press Enter to finish yet).
2. In another terminal, log in as Student and try to view all available courses or enroll/drop in a course.
3. **Expected:** The student's operation will block (wait) until the faculty finishes updating the course.
4. After the faculty completes the update, the student's operation will proceed and show the updated course info.

**Test 2: Multiple Students Concurrent Enrollment**
1. Open two student clients (e.g., Alice and another student).
2. Both try to enroll in Physics101 (which has only 1 seat) at the same time.
3. **Expected:** Only one student will succeed; the other will get a "Course full or not found" message, demonstrating semaphore concurrency.

**Test 3: Consistency Check During Operations**
1. While students are enrolling/dropping, have the admin run a consistency check.
2. **Expected:** The consistency check will wait for ongoing file operations to finish, ensuring no data corruption.

---

## 6. Notes
- You can run multiple clients at once by opening more terminal windows and running the client command in each.
- All data is stored in files in the project directory.
- For any issues, check the server terminal for error messages and consult actions.log for an audit trail. 